Problem:

Given an integer n, return a list of all possible full binary trees with n nodes. Each node of each tree in the answer must have Node.val == 0.

Each element of the answer is the root node of one possible tree. You may return the final list of trees in any order.

A full binary tree is a binary tree where each node has exactly 0 or 2 children.

Solution:

Code:

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    map<int, vector<TreeNode*> > size2tree;
    
    vector<TreeNode*> allPossibleFBT(int N) {
        if(size2tree.find(N)!=size2tree.end()){
            return size2tree.at(N);
        }else{
            vector<TreeNode*> ans;
            if(N==1){
                TreeNode* node = new TreeNode(0);
                ans.push_back(node);
            }else if(N%2==1){
                for(int lnum=1; lnum<=N-1-1; lnum+=2){
                    int rnum = N-1-lnum;
                    vector<TreeNode*> ltree = allPossibleFBT(lnum);
                    vector<TreeNode*> rtree = allPossibleFBT(rnum);
                    for(int ltreeix = 0; ltreeix < ltree.size(); ltreeix++){
                        for(int rtreeix = 0; rtreeix < rtree.size(); rtreeix++){
                            TreeNode* node = new TreeNode(0);
                            node->left = ltree[ltreeix];
                            node->right = rtree[rtreeix];
                            ans.push_back(node);
                        }
                    }
                }
            }
            size2tree.insert(make_pair(N, ans));
            return ans;
        }
    }
};
